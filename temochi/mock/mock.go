// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	temochi "github.com/bagusbpg/tenpo/temochi"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// DeleteChannelStock mocks base method.
func (m *MockService) DeleteChannelStock(ctx context.Context, req temochi.DeleteChannelStockReq, res *temochi.DeleteChannelStockRes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannelStock", ctx, req, res)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChannelStock indicates an expected call of DeleteChannelStock.
func (mr *MockServiceMockRecorder) DeleteChannelStock(ctx, req, res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelStock", reflect.TypeOf((*MockService)(nil).DeleteChannelStock), ctx, req, res)
}

// DeleteStock mocks base method.
func (m *MockService) DeleteStock(ctx context.Context, req temochi.DeleteStockReq, res *temochi.DeleteStockRes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStock", ctx, req, res)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStock indicates an expected call of DeleteStock.
func (mr *MockServiceMockRecorder) DeleteStock(ctx, req, res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStock", reflect.TypeOf((*MockService)(nil).DeleteStock), ctx, req, res)
}

// GetStocks mocks base method.
func (m *MockService) GetStocks(ctx context.Context, req temochi.GetStocksReq, res *temochi.GetStocksRes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStocks", ctx, req, res)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetStocks indicates an expected call of GetStocks.
func (mr *MockServiceMockRecorder) GetStocks(ctx, req, res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStocks", reflect.TypeOf((*MockService)(nil).GetStocks), ctx, req, res)
}

// UpdateChannelStocks mocks base method.
func (m *MockService) UpdateChannelStocks(ctx context.Context, req temochi.UpdateChannelStocksReq, res *temochi.UpdateChannelStocksRes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannelStocks", ctx, req, res)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateChannelStocks indicates an expected call of UpdateChannelStocks.
func (mr *MockServiceMockRecorder) UpdateChannelStocks(ctx, req, res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannelStocks", reflect.TypeOf((*MockService)(nil).UpdateChannelStocks), ctx, req, res)
}

// UpsertStocks mocks base method.
func (m *MockService) UpsertStocks(ctx context.Context, req temochi.UpsertStocksReq, res *temochi.UpsertStocksRes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertStocks", ctx, req, res)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertStocks indicates an expected call of UpsertStocks.
func (mr *MockServiceMockRecorder) UpsertStocks(ctx, req, res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertStocks", reflect.TypeOf((*MockService)(nil).UpsertStocks), ctx, req, res)
}
